plugins {
	id 'java'
	id 'java-test-fixtures'
	id 'org.springframework.boot' version '3.+'
	id 'io.spring.dependency-management' version '1.+'
	id "io.github.kobylynskyi.graphql.codegen" version "5.+"
	id "org.sonarqube" version "4.+"
	id "jacoco"
}

group = 'de.unistuttgart.iste.meitrex'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '21'

def jacocoEnabled = System.properties.getProperty("jacocoEnabled") ?: "true"

// Apply JaCoCo settings only if jacaco is enable
if (jacocoEnabled.toBoolean()) {
	project.logger.lifecycle('Applying jacoco settings from jacoco.gradle')
	apply from: rootProject.file("jacoco.gradle")
}

sonarqube {
	properties {
		property("sonar.projectKey", "MEITREX_common")
		property("sonar.organization", "meitrex")
		property("sonar.host.url", "https://sonarcloud.io")
	}

}

// Automatically generate DTOs from GraphQL schema:
graphqlCodegen {
	// all config options:
	// https://github.com/kobylynskyi/graphql-java-codegen/blob/main/docs/codegen-options.md
	outputDir = new File("$buildDir/generated")
	packageName = "de.unistuttgart.iste.meitrex.generated.dto"
	generatedAnnotation = "jakarta.annotation.Generated"
	modelValidationAnnotation = "jakarta.validation.constraints.NotNull"
	generateApis = false // set to false as the generator does not support spring boot graphQL
	customTypesMapping = [
			"DateTime" : "java.time.OffsetDateTime",
			"Date"     : "java.time.LocalDate",
			"Time"     : "java.time.OffsetTime",
			"LocalTime": "java.time.LocalTime",
			"UUID"     : "java.util.UUID",
			"Url"      : "java.net.URL",
	]
	generateEqualsAndHashCode = true
	generateToString = true
}

// Automatically generate GraphQL code on project build:
compileJava.dependsOn 'graphqlCodegen'

// Add generated sources to your project source sets:
sourceSets.main.java.srcDir "$buildDir/generated"

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
}

dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-graphql'
	implementation 'jakarta.validation:jakarta.validation-api'
	implementation 'io.dapr:dapr-sdk:1.+' // Dapr's core SDK with all features, except Actors.
	implementation 'io.dapr:dapr-sdk-springboot:1.+' // Dapr's SDK integration with SpringBoot
	implementation 'org.modelmapper:modelmapper:3.+'
	compileOnly 'org.projectlombok:lombok'
	developmentOnly 'org.springframework.boot:spring-boot-devtools'
	runtimeOnly 'org.postgresql:postgresql'
	annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.mockito:mockito-core:3.+"
	testImplementation 'org.hamcrest:hamcrest:2.+'
}

tasks.named('test') {
	useJUnitPlatform()
}
